from unittest.mock import patch
import os

from pydantic import ValidationError
import pytest

from app.core.config import Settings, settings


class TestSettings:
    """Test cases for the Settings class."""

    def test_default_values(self):
        """Test that default values are set correctly for optional fields."""
        test_settings = Settings()
        assert test_settings.API_V1_PREFIX == "/api"
        assert test_settings.SECRET_KEY == "your-secret-key-here"
        assert test_settings.BACKEND_CORS_ORIGINS == [
            "http://localhost:8000",
            "http://localhost:3000",
        ]
        assert test_settings.DATABASE_URI == (
            "postgresql+asyncpg://postgres:yourpassword@localhost:5432/klampis_pim"
        )
        assert test_settings.ADMIN_PARAMS == {
            "database": "postgres",
            "user": "postgres",
            "password": "yourpassword",
            "host": "localhost",
            "port": "5432"
        }
        assert test_settings.PROJECT_NAME == "KLAMPIS PIM"
        assert test_settings.VERSION == "1.0.0"
        assert test_settings.DEBUG is False
        assert test_settings.SYSTEM_USER_ID == 1
        assert test_settings.ACCESS_TOKEN_EXPIRE_MINUTES == 60

    @patch.dict(os.environ, {}, clear=True)
    def test_required_fields_validation(self):
        """Test that required fields raise ValidationError when missing."""
        with pytest.raises(ValidationError) as exc_info:
            Settings(_env_file=None)  # Disable .env file loading

        # Check that all required fields are mentioned in the error
        error_fields = {error['loc'][0] for error in exc_info.value.errors()}
        expected_fields = {
            'API_V1_PREFIX', 'SECRET_KEY', 'BACKEND_CORS_ORIGINS',
            'DATABASE_URI', 'ADMIN_PARAMS', 'PROJECT_NAME',
            'VERSION', 'DEBUG', 'SYSTEM_USER_ID'
        }
        assert expected_fields.issubset(error_fields)

    def test_field_types_validation(self):
        """Test that field types are validated correctly."""
        # Test invalid types
        with pytest.raises(ValidationError):
            Settings(
                API_V1_PREFIX=123,  # Should be string
                SECRET_KEY=456,  # Should be string
                DATABASE_URI=123,  # Should be string
                ADMIN_PARAMS="not_a_dict",  # Should be dict
                PROJECT_NAME=456,  # Should be string
                VERSION=789,  # Should be string
                DEBUG="not_bool",  # Should be bool
                SYSTEM_USER_ID="not_int",  # Should be int
                BACKEND_CORS_ORIGINS="invalid"  # Should be list after validation
            )

    def test_cors_origins_validator_with_string_input(self):
        """Test CORS origins validator with comma-separated string input."""
        test_settings = Settings(
            BACKEND_CORS_ORIGINS="http://localhost:3000,http://localhost:8080"
        )

        expected = ["http://localhost:3000", "http://localhost:8080"]
        assert test_settings.BACKEND_CORS_ORIGINS == expected

    def test_cors_origins_validator_with_string_input_with_spaces(self):
        """Test CORS origins validator handles spaces in comma-separated string."""
        cors_origins = (
            "http://localhost:3000, http://localhost:8080 , http://example.com"
        )
        test_settings = Settings(BACKEND_CORS_ORIGINS=cors_origins)

        expected = [
            "http://localhost:3000",
            "http://localhost:8080",
            "http://example.com"
        ]
        assert test_settings.BACKEND_CORS_ORIGINS == expected

    def test_cors_origins_validator_with_list_input(self):
        """Test CORS origins validator with list input."""
        origins_list = ["http://localhost:3000", "http://localhost:8080"]
        test_settings = Settings(BACKEND_CORS_ORIGINS=origins_list)

        assert test_settings.BACKEND_CORS_ORIGINS == origins_list

    def test_cors_origins_validator_with_empty_string(self):
        """Test CORS origins validator with empty string."""
        test_settings = Settings(BACKEND_CORS_ORIGINS="")
        assert test_settings.BACKEND_CORS_ORIGINS == [""]

    def test_cors_origins_validator_with_single_origin(self):
        """Test CORS origins validator with single origin string."""
        test_settings = Settings(BACKEND_CORS_ORIGINS="http://localhost:3000")

        assert test_settings.BACKEND_CORS_ORIGINS == ["http://localhost:3000"]

    def test_assemble_cors_origins_edge_cases(self):
        """Test edge cases for the assemble_cors_origins method."""
        # Test with None - the validator should handle this gracefully
        result = Settings.assemble_cors_origins(None)
        assert result is None

        # Test with non-string, non-list types
        # Should return None due to validator logic
        result = Settings.assemble_cors_origins(123)
        assert result is None

    @patch.dict(os.environ, {
        'API_V1_PREFIX': '/api/v2',
        'SECRET_KEY': 'test-secret',
        'ACCESS_TOKEN_EXPIRE_MINUTES': '120',
        'BACKEND_CORS_ORIGINS': '["http://test.com", "http://example.com"]',
        'DATABASE_URI': 'postgresql://test:test@localhost/test',
        'ADMIN_PARAMS': '{"host": "localhost"}',
        'PROJECT_NAME': 'Test PIM',
        'VERSION': '2.0.0',
        'DEBUG': 'true',
        'SYSTEM_USER_ID': '999'
    }, clear=True)
    def test_environment_variable_loading(self):
        """Test that environment variables are loaded correctly."""
        # Create a new Settings instance to pick up the environment variables
        test_settings = Settings()

        assert test_settings.API_V1_PREFIX == '/api/v2'
        assert test_settings.SECRET_KEY == 'test-secret'
        assert test_settings.ACCESS_TOKEN_EXPIRE_MINUTES == 120
        # JSON string is parsed by pydantic-settings
        cors_expected = ["http://test.com", "http://example.com"]
        assert test_settings.BACKEND_CORS_ORIGINS == cors_expected
        assert test_settings.DATABASE_URI == 'postgresql://test:test@localhost/test'
        assert test_settings.PROJECT_NAME == 'Test PIM'
        assert test_settings.VERSION == '2.0.0'
        assert test_settings.DEBUG is True
        assert test_settings.SYSTEM_USER_ID == 999

    def test_model_config_settings(self):
        """Test that model configuration is set correctly."""
        assert Settings.model_config['env_file'] == '.env'
        assert Settings.model_config['env_file_encoding'] == 'utf-8'
        assert Settings.model_config['case_sensitive'] is True

    def test_settings_instance_creation(self):
        """Test that the global settings instance can be created."""
        # This test ensures the settings instance can be imported and used
        assert settings is not None
        assert isinstance(settings, Settings)
